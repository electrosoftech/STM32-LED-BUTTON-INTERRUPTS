
led_button_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000303c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d4  080031d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031dc  080031dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031dc  080031dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000000c  080031f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080031f0  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce0a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203b  00000000  00000000  0002ce46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002f728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d47  00000000  00000000  0002fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a877  00000000  00000000  00050c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c84ca  00000000  00000000  0005b49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123968  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002238  00000000  00000000  001239bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031ac 	.word	0x080031ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080031ac 	.word	0x080031ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa4e 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f806 	bl	80004d8 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  led_driver_init();
 80004cc:	f000 f9c0 	bl	8000850 <led_driver_init>
  buttonDriverInt_Init();
 80004d0:	f000 f946 	bl	8000760 <buttonDriverInt_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
 80004d4:	e7fe      	b.n	80004d4 <main+0x14>
	...

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b094      	sub	sp, #80	; 0x50
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0320 	add.w	r3, r7, #32
 80004e2:	2230      	movs	r2, #48	; 0x30
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f002 fe58 	bl	800319c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <SystemClock_Config+0xb4>)
 8000502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <SystemClock_Config+0xb4>)
 8000506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050a:	6413      	str	r3, [r2, #64]	; 0x40
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <SystemClock_Config+0xb4>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <SystemClock_Config+0xb8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1b      	ldr	r2, [pc, #108]	; (8000590 <SystemClock_Config+0xb8>)
 8000522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <SystemClock_Config+0xb8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000534:	2302      	movs	r3, #2
 8000536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	2310      	movs	r3, #16
 800053e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000540:	2300      	movs	r3, #0
 8000542:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000544:	f107 0320 	add.w	r3, r7, #32
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fde7 	bl	800211c <HAL_RCC_OscConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000554:	f000 f81e 	bl	8000594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000558:	230f      	movs	r3, #15
 800055a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f84a 	bl	800260c <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800057e:	f000 f809 	bl	8000594 <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3750      	adds	r7, #80	; 0x50
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40023800 	.word	0x40023800
 8000590:	40007000 	.word	0x40007000

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <HAL_MspInit+0x4c>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <HAL_MspInit+0x4c>)
 80005b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b4:	6453      	str	r3, [r2, #68]	; 0x44
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <HAL_MspInit+0x4c>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_MspInit+0x4c>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <HAL_MspInit+0x4c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	6413      	str	r3, [r2, #64]	; 0x40
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_MspInit+0x4c>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005de:	2007      	movs	r0, #7
 80005e0:	f000 fae4 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40023800 	.word	0x40023800

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f9e4 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <OTG_FS_IRQHandler+0x10>)
 800064a:	f000 fae2 	bl	8000c12 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000002c 	.word	0x2000002c

08000658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <SystemInit+0x20>)
 800065e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <SystemInit+0x20>)
 8000664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800067c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000682:	490e      	ldr	r1, [pc, #56]	; (80006bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000698:	4c0b      	ldr	r4, [pc, #44]	; (80006c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006a6:	f7ff ffd7 	bl	8000658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006aa:	f002 fd53 	bl	8003154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ae:	f7ff ff07 	bl	80004c0 <main>
  bx  lr    
 80006b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80006b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c0:	080031e4 	.word	0x080031e4
  ldr r2, =_sbss
 80006c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c8:	20000330 	.word	0x20000330

080006cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC_IRQHandler>
	...

080006d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db0b      	blt.n	80006fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 021f 	and.w	r2, r3, #31
 80006e8:	4907      	ldr	r1, [pc, #28]	; (8000708 <__NVIC_EnableIRQ+0x38>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	2001      	movs	r0, #1
 80006f2:	fa00 f202 	lsl.w	r2, r0, r2
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e100 	.word	0xe000e100

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db0a      	blt.n	8000736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	490c      	ldr	r1, [pc, #48]	; (8000758 <__NVIC_SetPriority+0x4c>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000734:	e00a      	b.n	800074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <__NVIC_SetPriority+0x50>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	3b04      	subs	r3, #4
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	440b      	add	r3, r1
 800074a:	761a      	strb	r2, [r3, #24]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <buttonDriverInt_Init>:
	GPIOA->MODER &= ~(1<<1);
	GPIOA->MODER &= ~(1<<0);
}

void buttonDriverInt_Init()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <buttonDriverInt_Init+0x8c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <buttonDriverInt_Init+0x8c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <buttonDriverInt_Init+0x8c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <buttonDriverInt_Init+0x8c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <buttonDriverInt_Init+0x8c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <buttonDriverInt_Init+0x8c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
	//GPIOC

	GPIOA->MODER &= ~(1<<1);
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <buttonDriverInt_Init+0x90>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <buttonDriverInt_Init+0x90>)
 80007a4:	f023 0302 	bic.w	r3, r3, #2
 80007a8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<0);
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <buttonDriverInt_Init+0x90>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <buttonDriverInt_Init+0x90>)
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	6013      	str	r3, [r2, #0]
//	GPIOA ->MODER &= ~((3UL << 0));
//	GPIOA ->PUPDR &= ~((3UL << 0));
	//SYSCFG
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <buttonDriverInt_Init+0x94>)
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <buttonDriverInt_Init+0x94>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	6093      	str	r3, [r2, #8]
	//EXTI
	EXTI-> IMR |= EXTI_IMR_IM0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <buttonDriverInt_Init+0x98>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <buttonDriverInt_Init+0x98>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6013      	str	r3, [r2, #0]
	EXTI-> RTSR |= EXTI_RTSR_TR0;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <buttonDriverInt_Init+0x98>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <buttonDriverInt_Init+0x98>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6093      	str	r3, [r2, #8]
	//NVIC
	NVIC_SetPriority(EXTI0_IRQn, 1);
 80007d6:	2101      	movs	r1, #1
 80007d8:	2006      	movs	r0, #6
 80007da:	f7ff ff97 	bl	800070c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80007de:	2006      	movs	r0, #6
 80007e0:	f7ff ff76 	bl	80006d0 <__NVIC_EnableIRQ>

}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000
 80007f4:	40013800 	.word	0x40013800
 80007f8:	40013c00 	.word	0x40013c00

080007fc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

	GPIOD->ODR ^= GPIO_PIN_12;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <EXTI0_IRQHandler+0x4c>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	4a10      	ldr	r2, [pc, #64]	; (8000848 <EXTI0_IRQHandler+0x4c>)
 8000806:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800080a:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= GPIO_PIN_13;
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <EXTI0_IRQHandler+0x4c>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <EXTI0_IRQHandler+0x4c>)
 8000812:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000816:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= GPIO_PIN_14;
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <EXTI0_IRQHandler+0x4c>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <EXTI0_IRQHandler+0x4c>)
 800081e:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000822:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= GPIO_PIN_15;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <EXTI0_IRQHandler+0x4c>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <EXTI0_IRQHandler+0x4c>)
 800082a:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800082e:	6153      	str	r3, [r2, #20]
	EXTI->PR |= EXTI_PR_PR0;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <EXTI0_IRQHandler+0x50>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	4a05      	ldr	r2, [pc, #20]	; (800084c <EXTI0_IRQHandler+0x50>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6153      	str	r3, [r2, #20]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40020c00 	.word	0x40020c00
 800084c:	40013c00 	.word	0x40013c00

08000850 <led_driver_init>:
 *      Author: Numan
 */

#include "stm32f4xx_hal.h"
void led_driver_init(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3);
 8000854:	4b41      	ldr	r3, [pc, #260]	; (800095c <led_driver_init+0x10c>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	4a40      	ldr	r2, [pc, #256]	; (800095c <led_driver_init+0x10c>)
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER &= ~(1<<27);
 8000860:	4b3f      	ldr	r3, [pc, #252]	; (8000960 <led_driver_init+0x110>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a3e      	ldr	r2, [pc, #248]	; (8000960 <led_driver_init+0x110>)
 8000866:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800086a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<26);
 800086c:	4b3c      	ldr	r3, [pc, #240]	; (8000960 <led_driver_init+0x110>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a3b      	ldr	r2, [pc, #236]	; (8000960 <led_driver_init+0x110>)
 8000872:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000876:	6013      	str	r3, [r2, #0]

	GPIOD->MODER &= ~(1<<25);
 8000878:	4b39      	ldr	r3, [pc, #228]	; (8000960 <led_driver_init+0x110>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a38      	ldr	r2, [pc, #224]	; (8000960 <led_driver_init+0x110>)
 800087e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000882:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<24);
 8000884:	4b36      	ldr	r3, [pc, #216]	; (8000960 <led_driver_init+0x110>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a35      	ldr	r2, [pc, #212]	; (8000960 <led_driver_init+0x110>)
 800088a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800088e:	6013      	str	r3, [r2, #0]

	GPIOD->MODER &= ~(1<<29);
 8000890:	4b33      	ldr	r3, [pc, #204]	; (8000960 <led_driver_init+0x110>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a32      	ldr	r2, [pc, #200]	; (8000960 <led_driver_init+0x110>)
 8000896:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800089a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<28);
 800089c:	4b30      	ldr	r3, [pc, #192]	; (8000960 <led_driver_init+0x110>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <led_driver_init+0x110>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6013      	str	r3, [r2, #0]

	GPIOD->MODER &= ~(1<<31);
 80008a8:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <led_driver_init+0x110>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <led_driver_init+0x110>)
 80008ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80008b2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<30);
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <led_driver_init+0x110>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a29      	ldr	r2, [pc, #164]	; (8000960 <led_driver_init+0x110>)
 80008ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80008be:	6013      	str	r3, [r2, #0]

	GPIOD->OTYPER &= ~(1<<12);
 80008c0:	4b27      	ldr	r3, [pc, #156]	; (8000960 <led_driver_init+0x110>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	4a26      	ldr	r2, [pc, #152]	; (8000960 <led_driver_init+0x110>)
 80008c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ca:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &= ~(1<<13);
 80008cc:	4b24      	ldr	r3, [pc, #144]	; (8000960 <led_driver_init+0x110>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	4a23      	ldr	r2, [pc, #140]	; (8000960 <led_driver_init+0x110>)
 80008d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008d6:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &= ~(1<<14);
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <led_driver_init+0x110>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4a20      	ldr	r2, [pc, #128]	; (8000960 <led_driver_init+0x110>)
 80008de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008e2:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &= ~(1<<15);
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <led_driver_init+0x110>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <led_driver_init+0x110>)
 80008ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008ee:	6053      	str	r3, [r2, #4]

	GPIOD->OSPEEDR &= ~(1<<27);
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <led_driver_init+0x110>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <led_driver_init+0x110>)
 80008f6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80008fa:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR |= (1<<26);
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <led_driver_init+0x110>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	4a17      	ldr	r2, [pc, #92]	; (8000960 <led_driver_init+0x110>)
 8000902:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000906:	6093      	str	r3, [r2, #8]

	GPIOD->OSPEEDR &= ~(1<<25);
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <led_driver_init+0x110>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	4a14      	ldr	r2, [pc, #80]	; (8000960 <led_driver_init+0x110>)
 800090e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000912:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR |= (1<<24);
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <led_driver_init+0x110>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	4a11      	ldr	r2, [pc, #68]	; (8000960 <led_driver_init+0x110>)
 800091a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800091e:	6093      	str	r3, [r2, #8]

	GPIOD->OSPEEDR &= ~(1<<29);
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <led_driver_init+0x110>)
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <led_driver_init+0x110>)
 8000926:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800092a:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR |= (1<<28);
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <led_driver_init+0x110>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <led_driver_init+0x110>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000936:	6093      	str	r3, [r2, #8]

	GPIOD->OSPEEDR &= ~(1<<31);
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <led_driver_init+0x110>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	4a08      	ldr	r2, [pc, #32]	; (8000960 <led_driver_init+0x110>)
 800093e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000942:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR |= (1<<30);
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <led_driver_init+0x110>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	4a05      	ldr	r2, [pc, #20]	; (8000960 <led_driver_init+0x110>)
 800094a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800094e:	6093      	str	r3, [r2, #8]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020c00 	.word	0x40020c00

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <HAL_Init+0x40>)
 800096e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_Init+0x40>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800097e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x40>)
 8000986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f90d 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fe02 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023c00 	.word	0x40023c00

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f917 	bl	8000bfa <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f8ed 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000028 	.word	0x20000028

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000028 	.word	0x20000028

08000a48 <__NVIC_SetPriorityGrouping>:
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_SetPriority>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff8e 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff47 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff5c 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff8e 	bl	8000b00 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5d 	bl	8000aac <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffb0 	bl	8000b68 <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 ff5d 	bl	8002ae8 <USB_GetMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	f040 80ef 	bne.w	8000e14 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 ff41 	bl	8002ac2 <USB_ReadInterrupts>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80e5 	beq.w	8000e12 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 ff38 	bl	8002ac2 <USB_ReadInterrupts>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c5c:	d104      	bne.n	8000c68 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 ff28 	bl	8002ac2 <USB_ReadInterrupts>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000c7c:	d104      	bne.n	8000c88 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c86:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 ff18 	bl	8002ac2 <USB_ReadInterrupts>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000c9c:	d104      	bne.n	8000ca8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ca6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 ff08 	bl	8002ac2 <USB_ReadInterrupts>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d103      	bne.n	8000cc4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fefa 	bl	8002ac2 <USB_ReadInterrupts>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cd8:	d115      	bne.n	8000d06 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ce2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d108      	bne.n	8000d06 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f002 f9ad 	bl	8003054 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2101      	movs	r1, #1
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 feff 	bl	8002b04 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fed9 	bl	8002ac2 <USB_ReadInterrupts>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1a:	d102      	bne.n	8000d22 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f001 f98a 	bl	8002036 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fecb 	bl	8002ac2 <USB_ReadInterrupts>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d106      	bne.n	8000d44 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f002 f970 	bl	800301c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2208      	movs	r2, #8
 8000d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 feba 	bl	8002ac2 <USB_ReadInterrupts>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f003 0310 	and.w	r3, r3, #16
 8000d54:	2b10      	cmp	r3, #16
 8000d56:	d101      	bne.n	8000d5c <HAL_HCD_IRQHandler+0x14a>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <HAL_HCD_IRQHandler+0x14c>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d012      	beq.n	8000d88 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	699a      	ldr	r2, [r3, #24]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0210 	bic.w	r2, r2, #16
 8000d70:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f001 f88d 	bl	8001e92 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	699a      	ldr	r2, [r3, #24]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0210 	orr.w	r2, r2, #16
 8000d86:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fe98 	bl	8002ac2 <USB_ReadInterrupts>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d9c:	d13a      	bne.n	8000e14 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fee8 	bl	8002b78 <USB_HC_ReadInterrupt>
 8000da8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e025      	b.n	8000dfc <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d018      	beq.n	8000df6 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	015a      	lsls	r2, r3, #5
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dda:	d106      	bne.n	8000dea <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4619      	mov	r1, r3
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f836 	bl	8000e54 <HCD_HC_IN_IRQHandler>
 8000de8:	e005      	b.n	8000df6 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 fc51 	bl	8001698 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d3d4      	bcc.n	8000db0 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	e000      	b.n	8000e14 <HAL_HCD_IRQHandler+0x202>
      return;
 8000e12:	bf00      	nop
    }
  }
}
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d101      	bne.n	8000e30 <HAL_HCD_Stop+0x16>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	e00d      	b.n	8000e4c <HAL_HCD_Stop+0x32>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 ffc8 	bl	8002dd2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	015a      	lsls	r2, r3, #5
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4413      	add	r3, r2
 8000e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d119      	bne.n	8000eb8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	015a      	lsls	r2, r3, #5
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e90:	461a      	mov	r2, r3
 8000e92:	2304      	movs	r3, #4
 8000e94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	015a      	lsls	r2, r3, #5
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	0151      	lsls	r1, r2, #5
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	440a      	add	r2, r1
 8000eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	60d3      	str	r3, [r2, #12]
 8000eb6:	e101      	b.n	80010bc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	015a      	lsls	r2, r3, #5
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ece:	d12b      	bne.n	8000f28 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	015a      	lsls	r2, r3, #5
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000edc:	461a      	mov	r2, r3
 8000ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	212c      	movs	r1, #44	; 0x2c
 8000eea:	fb01 f303 	mul.w	r3, r1, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	3361      	adds	r3, #97	; 0x61
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	015a      	lsls	r2, r3, #5
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4413      	add	r3, r2
 8000efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	0151      	lsls	r1, r2, #5
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	440a      	add	r2, r1
 8000f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fe3a 	bl	8002b9a <USB_HC_Halt>
 8000f26:	e0c9      	b.n	80010bc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	015a      	lsls	r2, r3, #5
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4413      	add	r3, r2
 8000f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	2b20      	cmp	r3, #32
 8000f3c:	d109      	bne.n	8000f52 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	015a      	lsls	r2, r3, #5
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4413      	add	r3, r2
 8000f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	6093      	str	r3, [r2, #8]
 8000f50:	e0b4      	b.n	80010bc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	015a      	lsls	r2, r3, #5
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4413      	add	r3, r2
 8000f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d133      	bne.n	8000fd0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	015a      	lsls	r2, r3, #5
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4413      	add	r3, r2
 8000f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	0151      	lsls	r1, r2, #5
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	440a      	add	r2, r1
 8000f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	212c      	movs	r1, #44	; 0x2c
 8000f8e:	fb01 f303 	mul.w	r3, r1, r3
 8000f92:	4413      	add	r3, r2
 8000f94:	3361      	adds	r3, #97	; 0x61
 8000f96:	2205      	movs	r2, #5
 8000f98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	015a      	lsls	r2, r3, #5
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2310      	movs	r3, #16
 8000faa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	015a      	lsls	r2, r3, #5
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2308      	movs	r3, #8
 8000fbc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 fde6 	bl	8002b9a <USB_HC_Halt>
 8000fce:	e075      	b.n	80010bc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	015a      	lsls	r2, r3, #5
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe6:	d134      	bne.n	8001052 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	015a      	lsls	r2, r3, #5
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4413      	add	r3, r2
 8000ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	0151      	lsls	r1, r2, #5
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	440a      	add	r2, r1
 8000ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	212c      	movs	r1, #44	; 0x2c
 800100e:	fb01 f303 	mul.w	r3, r1, r3
 8001012:	4413      	add	r3, r2
 8001014:	3361      	adds	r3, #97	; 0x61
 8001016:	2208      	movs	r2, #8
 8001018:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	015a      	lsls	r2, r3, #5
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4413      	add	r3, r2
 8001022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001026:	461a      	mov	r2, r3
 8001028:	2310      	movs	r3, #16
 800102a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	015a      	lsls	r2, r3, #5
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4413      	add	r3, r2
 8001034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001038:	461a      	mov	r2, r3
 800103a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fda5 	bl	8002b9a <USB_HC_Halt>
 8001050:	e034      	b.n	80010bc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	015a      	lsls	r2, r3, #5
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4413      	add	r3, r2
 800105a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001064:	2b80      	cmp	r3, #128	; 0x80
 8001066:	d129      	bne.n	80010bc <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	015a      	lsls	r2, r3, #5
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4413      	add	r3, r2
 8001070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	0151      	lsls	r1, r2, #5
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	440a      	add	r2, r1
 800107e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	212c      	movs	r1, #44	; 0x2c
 800108e:	fb01 f303 	mul.w	r3, r1, r3
 8001092:	4413      	add	r3, r2
 8001094:	3361      	adds	r3, #97	; 0x61
 8001096:	2206      	movs	r2, #6
 8001098:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fd78 	bl	8002b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	015a      	lsls	r2, r3, #5
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4413      	add	r3, r2
 80010b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010b6:	461a      	mov	r2, r3
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	015a      	lsls	r2, r3, #5
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4413      	add	r3, r2
 80010c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d2:	d122      	bne.n	800111a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	015a      	lsls	r2, r3, #5
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4413      	add	r3, r2
 80010dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	0151      	lsls	r1, r2, #5
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	440a      	add	r2, r1
 80010ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fd4b 	bl	8002b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	015a      	lsls	r2, r3, #5
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4413      	add	r3, r2
 800110c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001110:	461a      	mov	r2, r3
 8001112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001116:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001118:	e2ba      	b.n	8001690 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	015a      	lsls	r2, r3, #5
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4413      	add	r3, r2
 8001122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	f040 811b 	bne.w	8001368 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d019      	beq.n	800116e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	212c      	movs	r1, #44	; 0x2c
 8001140:	fb01 f303 	mul.w	r3, r1, r3
 8001144:	4413      	add	r3, r2
 8001146:	3348      	adds	r3, #72	; 0x48
 8001148:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	0159      	lsls	r1, r3, #5
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	440b      	add	r3, r1
 8001152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800115c:	1ad2      	subs	r2, r2, r3
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	202c      	movs	r0, #44	; 0x2c
 8001164:	fb00 f303 	mul.w	r3, r0, r3
 8001168:	440b      	add	r3, r1
 800116a:	3350      	adds	r3, #80	; 0x50
 800116c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	212c      	movs	r1, #44	; 0x2c
 8001174:	fb01 f303 	mul.w	r3, r1, r3
 8001178:	4413      	add	r3, r2
 800117a:	3361      	adds	r3, #97	; 0x61
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	212c      	movs	r1, #44	; 0x2c
 8001186:	fb01 f303 	mul.w	r3, r1, r3
 800118a:	4413      	add	r3, r2
 800118c:	335c      	adds	r3, #92	; 0x5c
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	015a      	lsls	r2, r3, #5
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4413      	add	r3, r2
 800119a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800119e:	461a      	mov	r2, r3
 80011a0:	2301      	movs	r3, #1
 80011a2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	212c      	movs	r1, #44	; 0x2c
 80011aa:	fb01 f303 	mul.w	r3, r1, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	333f      	adds	r3, #63	; 0x3f
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	212c      	movs	r1, #44	; 0x2c
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	333f      	adds	r3, #63	; 0x3f
 80011c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d121      	bne.n	8001210 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	015a      	lsls	r2, r3, #5
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4413      	add	r3, r2
 80011d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	0151      	lsls	r1, r2, #5
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	440a      	add	r2, r1
 80011e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fccf 	bl	8002b9a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	015a      	lsls	r2, r3, #5
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4413      	add	r3, r2
 8001204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001208:	461a      	mov	r2, r3
 800120a:	2310      	movs	r3, #16
 800120c:	6093      	str	r3, [r2, #8]
 800120e:	e066      	b.n	80012de <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	212c      	movs	r1, #44	; 0x2c
 8001216:	fb01 f303 	mul.w	r3, r1, r3
 800121a:	4413      	add	r3, r2
 800121c:	333f      	adds	r3, #63	; 0x3f
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d127      	bne.n	8001274 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4413      	add	r3, r2
 800122c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	0151      	lsls	r1, r2, #5
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	440a      	add	r2, r1
 800123a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800123e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001242:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	212c      	movs	r1, #44	; 0x2c
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	4413      	add	r3, r2
 8001250:	3360      	adds	r3, #96	; 0x60
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	b2d9      	uxtb	r1, r3
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	202c      	movs	r0, #44	; 0x2c
 8001260:	fb00 f303 	mul.w	r3, r0, r3
 8001264:	4413      	add	r3, r2
 8001266:	3360      	adds	r3, #96	; 0x60
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f001 feff 	bl	8003070 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001272:	e034      	b.n	80012de <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	212c      	movs	r1, #44	; 0x2c
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	4413      	add	r3, r2
 8001280:	333f      	adds	r3, #63	; 0x3f
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d12a      	bne.n	80012de <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	212c      	movs	r1, #44	; 0x2c
 800128e:	fb01 f303 	mul.w	r3, r1, r3
 8001292:	4413      	add	r3, r2
 8001294:	3360      	adds	r3, #96	; 0x60
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	212c      	movs	r1, #44	; 0x2c
 80012a0:	fb01 f303 	mul.w	r3, r1, r3
 80012a4:	4413      	add	r3, r2
 80012a6:	3354      	adds	r3, #84	; 0x54
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	f083 0301 	eor.w	r3, r3, #1
 80012ae:	b2d8      	uxtb	r0, r3
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	212c      	movs	r1, #44	; 0x2c
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	3354      	adds	r3, #84	; 0x54
 80012be:	4602      	mov	r2, r0
 80012c0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	b2d9      	uxtb	r1, r3
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	202c      	movs	r0, #44	; 0x2c
 80012cc:	fb00 f303 	mul.w	r3, r0, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	3360      	adds	r3, #96	; 0x60
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f001 fec9 	bl	8003070 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d12b      	bne.n	800133e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	212c      	movs	r1, #44	; 0x2c
 80012ec:	fb01 f303 	mul.w	r3, r1, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	3348      	adds	r3, #72	; 0x48
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	202c      	movs	r0, #44	; 0x2c
 80012fc:	fb00 f202 	mul.w	r2, r0, r2
 8001300:	440a      	add	r2, r1
 8001302:	3240      	adds	r2, #64	; 0x40
 8001304:	8812      	ldrh	r2, [r2, #0]
 8001306:	fbb3 f3f2 	udiv	r3, r3, r2
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 81be 	beq.w	8001690 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	212c      	movs	r1, #44	; 0x2c
 800131a:	fb01 f303 	mul.w	r3, r1, r3
 800131e:	4413      	add	r3, r2
 8001320:	3354      	adds	r3, #84	; 0x54
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	f083 0301 	eor.w	r3, r3, #1
 8001328:	b2d8      	uxtb	r0, r3
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	212c      	movs	r1, #44	; 0x2c
 8001330:	fb01 f303 	mul.w	r3, r1, r3
 8001334:	4413      	add	r3, r2
 8001336:	3354      	adds	r3, #84	; 0x54
 8001338:	4602      	mov	r2, r0
 800133a:	701a      	strb	r2, [r3, #0]
}
 800133c:	e1a8      	b.n	8001690 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	212c      	movs	r1, #44	; 0x2c
 8001344:	fb01 f303 	mul.w	r3, r1, r3
 8001348:	4413      	add	r3, r2
 800134a:	3354      	adds	r3, #84	; 0x54
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2d8      	uxtb	r0, r3
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	212c      	movs	r1, #44	; 0x2c
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	4413      	add	r3, r2
 8001360:	3354      	adds	r3, #84	; 0x54
 8001362:	4602      	mov	r2, r0
 8001364:	701a      	strb	r2, [r3, #0]
}
 8001366:	e193      	b.n	8001690 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	015a      	lsls	r2, r3, #5
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4413      	add	r3, r2
 8001370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b02      	cmp	r3, #2
 800137c:	f040 8106 	bne.w	800158c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	015a      	lsls	r2, r3, #5
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4413      	add	r3, r2
 8001388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	0151      	lsls	r1, r2, #5
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	440a      	add	r2, r1
 8001396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800139a:	f023 0302 	bic.w	r3, r3, #2
 800139e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	212c      	movs	r1, #44	; 0x2c
 80013a6:	fb01 f303 	mul.w	r3, r1, r3
 80013aa:	4413      	add	r3, r2
 80013ac:	3361      	adds	r3, #97	; 0x61
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d109      	bne.n	80013c8 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	212c      	movs	r1, #44	; 0x2c
 80013ba:	fb01 f303 	mul.w	r3, r1, r3
 80013be:	4413      	add	r3, r2
 80013c0:	3360      	adds	r3, #96	; 0x60
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	e0c9      	b.n	800155c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	212c      	movs	r1, #44	; 0x2c
 80013ce:	fb01 f303 	mul.w	r3, r1, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	3361      	adds	r3, #97	; 0x61
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d109      	bne.n	80013f0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	212c      	movs	r1, #44	; 0x2c
 80013e2:	fb01 f303 	mul.w	r3, r1, r3
 80013e6:	4413      	add	r3, r2
 80013e8:	3360      	adds	r3, #96	; 0x60
 80013ea:	2205      	movs	r2, #5
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e0b5      	b.n	800155c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	212c      	movs	r1, #44	; 0x2c
 80013f6:	fb01 f303 	mul.w	r3, r1, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	3361      	adds	r3, #97	; 0x61
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b06      	cmp	r3, #6
 8001402:	d009      	beq.n	8001418 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	212c      	movs	r1, #44	; 0x2c
 800140a:	fb01 f303 	mul.w	r3, r1, r3
 800140e:	4413      	add	r3, r2
 8001410:	3361      	adds	r3, #97	; 0x61
 8001412:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001414:	2b08      	cmp	r3, #8
 8001416:	d150      	bne.n	80014ba <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	212c      	movs	r1, #44	; 0x2c
 800141e:	fb01 f303 	mul.w	r3, r1, r3
 8001422:	4413      	add	r3, r2
 8001424:	335c      	adds	r3, #92	; 0x5c
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	202c      	movs	r0, #44	; 0x2c
 8001430:	fb00 f303 	mul.w	r3, r0, r3
 8001434:	440b      	add	r3, r1
 8001436:	335c      	adds	r3, #92	; 0x5c
 8001438:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	212c      	movs	r1, #44	; 0x2c
 8001440:	fb01 f303 	mul.w	r3, r1, r3
 8001444:	4413      	add	r3, r2
 8001446:	335c      	adds	r3, #92	; 0x5c
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d912      	bls.n	8001474 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	212c      	movs	r1, #44	; 0x2c
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	4413      	add	r3, r2
 800145a:	335c      	adds	r3, #92	; 0x5c
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	212c      	movs	r1, #44	; 0x2c
 8001466:	fb01 f303 	mul.w	r3, r1, r3
 800146a:	4413      	add	r3, r2
 800146c:	3360      	adds	r3, #96	; 0x60
 800146e:	2204      	movs	r2, #4
 8001470:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001472:	e073      	b.n	800155c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	212c      	movs	r1, #44	; 0x2c
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	4413      	add	r3, r2
 8001480:	3360      	adds	r3, #96	; 0x60
 8001482:	2202      	movs	r2, #2
 8001484:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	015a      	lsls	r2, r3, #5
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4413      	add	r3, r2
 800148e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800149c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014a4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80014b8:	e050      	b.n	800155c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	212c      	movs	r1, #44	; 0x2c
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	3361      	adds	r3, #97	; 0x61
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d122      	bne.n	8001514 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	212c      	movs	r1, #44	; 0x2c
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	4413      	add	r3, r2
 80014da:	3360      	adds	r3, #96	; 0x60
 80014dc:	2202      	movs	r2, #2
 80014de:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	015a      	lsls	r2, r3, #5
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014f6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014fe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800150c:	461a      	mov	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e023      	b.n	800155c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	212c      	movs	r1, #44	; 0x2c
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	4413      	add	r3, r2
 8001520:	3361      	adds	r3, #97	; 0x61
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b07      	cmp	r3, #7
 8001526:	d119      	bne.n	800155c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	212c      	movs	r1, #44	; 0x2c
 800152e:	fb01 f303 	mul.w	r3, r1, r3
 8001532:	4413      	add	r3, r2
 8001534:	335c      	adds	r3, #92	; 0x5c
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	202c      	movs	r0, #44	; 0x2c
 8001540:	fb00 f303 	mul.w	r3, r0, r3
 8001544:	440b      	add	r3, r1
 8001546:	335c      	adds	r3, #92	; 0x5c
 8001548:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	212c      	movs	r1, #44	; 0x2c
 8001550:	fb01 f303 	mul.w	r3, r1, r3
 8001554:	4413      	add	r3, r2
 8001556:	3360      	adds	r3, #96	; 0x60
 8001558:	2204      	movs	r2, #4
 800155a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	015a      	lsls	r2, r3, #5
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4413      	add	r3, r2
 8001564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001568:	461a      	mov	r2, r3
 800156a:	2302      	movs	r3, #2
 800156c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	b2d9      	uxtb	r1, r3
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	202c      	movs	r0, #44	; 0x2c
 8001578:	fb00 f303 	mul.w	r3, r0, r3
 800157c:	4413      	add	r3, r2
 800157e:	3360      	adds	r3, #96	; 0x60
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f001 fd73 	bl	8003070 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800158a:	e081      	b.n	8001690 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4413      	add	r3, r2
 8001594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d176      	bne.n	8001690 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	212c      	movs	r1, #44	; 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	333f      	adds	r3, #63	; 0x3f
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d121      	bne.n	80015fa <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	212c      	movs	r1, #44	; 0x2c
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	335c      	adds	r3, #92	; 0x5c
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	0151      	lsls	r1, r2, #5
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	440a      	add	r2, r1
 80015de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fad1 	bl	8002b9a <USB_HC_Halt>
 80015f8:	e041      	b.n	800167e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	212c      	movs	r1, #44	; 0x2c
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	4413      	add	r3, r2
 8001606:	333f      	adds	r3, #63	; 0x3f
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	212c      	movs	r1, #44	; 0x2c
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	4413      	add	r3, r2
 800161a:	333f      	adds	r3, #63	; 0x3f
 800161c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800161e:	2b02      	cmp	r3, #2
 8001620:	d12d      	bne.n	800167e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	212c      	movs	r1, #44	; 0x2c
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	4413      	add	r3, r2
 800162e:	335c      	adds	r3, #92	; 0x5c
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d120      	bne.n	800167e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3361      	adds	r3, #97	; 0x61
 800164a:	2203      	movs	r2, #3
 800164c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	015a      	lsls	r2, r3, #5
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4413      	add	r3, r2
 8001656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	0151      	lsls	r1, r2, #5
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	440a      	add	r2, r1
 8001664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fa8e 	bl	8002b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4413      	add	r3, r2
 8001686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800168a:	461a      	mov	r2, r3
 800168c:	2310      	movs	r3, #16
 800168e:	6093      	str	r3, [r2, #8]
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	015a      	lsls	r2, r3, #5
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d119      	bne.n	80016fc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d4:	461a      	mov	r2, r3
 80016d6:	2304      	movs	r3, #4
 80016d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	0151      	lsls	r1, r2, #5
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	440a      	add	r2, r1
 80016f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80016fa:	e3c6      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	4413      	add	r3, r2
 8001704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	2b20      	cmp	r3, #32
 8001710:	d13e      	bne.n	8001790 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	015a      	lsls	r2, r3, #5
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4413      	add	r3, r2
 800171a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800171e:	461a      	mov	r2, r3
 8001720:	2320      	movs	r3, #32
 8001722:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	333d      	adds	r3, #61	; 0x3d
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	f040 83a8 	bne.w	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	212c      	movs	r1, #44	; 0x2c
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	4413      	add	r3, r2
 8001746:	333d      	adds	r3, #61	; 0x3d
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	212c      	movs	r1, #44	; 0x2c
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4413      	add	r3, r2
 8001758:	3360      	adds	r3, #96	; 0x60
 800175a:	2202      	movs	r2, #2
 800175c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4413      	add	r3, r2
 8001766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	0151      	lsls	r1, r2, #5
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	440a      	add	r2, r1
 8001774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f001 fa06 	bl	8002b9a <USB_HC_Halt>
}
 800178e:	e37c      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	015a      	lsls	r2, r3, #5
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	4413      	add	r3, r2
 8001798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a6:	d122      	bne.n	80017ee <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	0151      	lsls	r1, r2, #5
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	440a      	add	r2, r1
 80017be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f001 f9e1 	bl	8002b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	015a      	lsls	r2, r3, #5
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	4413      	add	r3, r2
 80017e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e4:	461a      	mov	r2, r3
 80017e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ea:	6093      	str	r3, [r2, #8]
}
 80017ec:	e34d      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d150      	bne.n	80018a6 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	335c      	adds	r3, #92	; 0x5c
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4413      	add	r3, r2
 800181e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001828:	2b40      	cmp	r3, #64	; 0x40
 800182a:	d111      	bne.n	8001850 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	333d      	adds	r3, #61	; 0x3d
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4413      	add	r3, r2
 8001846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184a:	461a      	mov	r2, r3
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	4413      	add	r3, r2
 8001858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	0151      	lsls	r1, r2, #5
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	440a      	add	r2, r1
 8001866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800186a:	f043 0302 	orr.w	r3, r3, #2
 800186e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f001 f98d 	bl	8002b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	015a      	lsls	r2, r3, #5
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	4413      	add	r3, r2
 8001888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188c:	461a      	mov	r2, r3
 800188e:	2301      	movs	r3, #1
 8001890:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3361      	adds	r3, #97	; 0x61
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
}
 80018a4:	e2f1      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b8:	2b40      	cmp	r3, #64	; 0x40
 80018ba:	d13c      	bne.n	8001936 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	212c      	movs	r1, #44	; 0x2c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	3361      	adds	r3, #97	; 0x61
 80018ca:	2204      	movs	r2, #4
 80018cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	333d      	adds	r3, #61	; 0x3d
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	335c      	adds	r3, #92	; 0x5c
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	0151      	lsls	r1, r2, #5
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	440a      	add	r2, r1
 8001908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f001 f93c 	bl	8002b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4413      	add	r3, r2
 800192a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192e:	461a      	mov	r2, r3
 8001930:	2340      	movs	r3, #64	; 0x40
 8001932:	6093      	str	r3, [r2, #8]
}
 8001934:	e2a9      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4413      	add	r3, r2
 800193e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b08      	cmp	r3, #8
 800194a:	d12a      	bne.n	80019a2 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	4413      	add	r3, r2
 8001954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001958:	461a      	mov	r2, r3
 800195a:	2308      	movs	r3, #8
 800195c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4413      	add	r3, r2
 8001966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	0151      	lsls	r1, r2, #5
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	440a      	add	r2, r1
 8001974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f001 f906 	bl	8002b9a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3361      	adds	r3, #97	; 0x61
 800199c:	2205      	movs	r2, #5
 800199e:	701a      	strb	r2, [r3, #0]
}
 80019a0:	e273      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b10      	cmp	r3, #16
 80019b6:	d150      	bne.n	8001a5a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	335c      	adds	r3, #92	; 0x5c
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3361      	adds	r3, #97	; 0x61
 80019d8:	2203      	movs	r2, #3
 80019da:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	333d      	adds	r3, #61	; 0x3d
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d112      	bne.n	8001a16 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	333c      	adds	r3, #60	; 0x3c
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d108      	bne.n	8001a16 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	333d      	adds	r3, #61	; 0x3d
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	0151      	lsls	r1, r2, #5
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	440a      	add	r2, r1
 8001a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 f8aa 	bl	8002b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	015a      	lsls	r2, r3, #5
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a52:	461a      	mov	r2, r3
 8001a54:	2310      	movs	r3, #16
 8001a56:	6093      	str	r3, [r2, #8]
}
 8001a58:	e217      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	015a      	lsls	r2, r3, #5
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6c:	2b80      	cmp	r3, #128	; 0x80
 8001a6e:	d174      	bne.n	8001b5a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d121      	bne.n	8001abc <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3361      	adds	r3, #97	; 0x61
 8001a86:	2206      	movs	r2, #6
 8001a88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	0151      	lsls	r1, r2, #5
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	440a      	add	r2, r1
 8001aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 f870 	bl	8002b9a <USB_HC_Halt>
 8001aba:	e044      	b.n	8001b46 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	335c      	adds	r3, #92	; 0x5c
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	202c      	movs	r0, #44	; 0x2c
 8001ad4:	fb00 f303 	mul.w	r3, r0, r3
 8001ad8:	440b      	add	r3, r1
 8001ada:	335c      	adds	r3, #92	; 0x5c
 8001adc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	212c      	movs	r1, #44	; 0x2c
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	335c      	adds	r3, #92	; 0x5c
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d920      	bls.n	8001b34 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	212c      	movs	r1, #44	; 0x2c
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	335c      	adds	r3, #92	; 0x5c
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	212c      	movs	r1, #44	; 0x2c
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	3360      	adds	r3, #96	; 0x60
 8001b12:	2204      	movs	r2, #4
 8001b14:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	b2d9      	uxtb	r1, r3
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	202c      	movs	r0, #44	; 0x2c
 8001b20:	fb00 f303 	mul.w	r3, r0, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	3360      	adds	r3, #96	; 0x60
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f001 fa9f 	bl	8003070 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001b32:	e008      	b.n	8001b46 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	3360      	adds	r3, #96	; 0x60
 8001b42:	2202      	movs	r2, #2
 8001b44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	015a      	lsls	r2, r3, #5
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b52:	461a      	mov	r2, r3
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	6093      	str	r3, [r2, #8]
}
 8001b58:	e197      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	015a      	lsls	r2, r3, #5
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4413      	add	r3, r2
 8001b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b70:	d134      	bne.n	8001bdc <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	0151      	lsls	r1, r2, #5
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	440a      	add	r2, r1
 8001b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fffc 	bl	8002b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	212c      	movs	r1, #44	; 0x2c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3361      	adds	r3, #97	; 0x61
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	701a      	strb	r2, [r3, #0]
}
 8001bda:	e156      	b.n	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	f040 814b 	bne.w	8001e8a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	015a      	lsls	r2, r3, #5
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	0151      	lsls	r1, r2, #5
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	440a      	add	r2, r1
 8001c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c0e:	f023 0302 	bic.w	r3, r3, #2
 8001c12:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	212c      	movs	r1, #44	; 0x2c
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	3361      	adds	r3, #97	; 0x61
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d179      	bne.n	8001d1c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	212c      	movs	r1, #44	; 0x2c
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	3360      	adds	r3, #96	; 0x60
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	333f      	adds	r3, #63	; 0x3f
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d00a      	beq.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	333f      	adds	r3, #63	; 0x3f
 8001c5c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	f040 80fc 	bne.w	8001e5c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d142      	bne.n	8001cf2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	334c      	adds	r3, #76	; 0x4c
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80ed 	beq.w	8001e5c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	212c      	movs	r1, #44	; 0x2c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	334c      	adds	r3, #76	; 0x4c
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	202c      	movs	r0, #44	; 0x2c
 8001c98:	fb00 f202 	mul.w	r2, r0, r2
 8001c9c:	440a      	add	r2, r1
 8001c9e:	3240      	adds	r2, #64	; 0x40
 8001ca0:	8812      	ldrh	r2, [r2, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	202c      	movs	r0, #44	; 0x2c
 8001cac:	fb00 f202 	mul.w	r2, r0, r2
 8001cb0:	440a      	add	r2, r1
 8001cb2:	3240      	adds	r2, #64	; 0x40
 8001cb4:	8812      	ldrh	r2, [r2, #0]
 8001cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80ca 	beq.w	8001e5c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3355      	adds	r3, #85	; 0x55
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f083 0301 	eor.w	r3, r3, #1
 8001cdc:	b2d8      	uxtb	r0, r3
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	212c      	movs	r1, #44	; 0x2c
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	3355      	adds	r3, #85	; 0x55
 8001cec:	4602      	mov	r2, r0
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e0b4      	b.n	8001e5c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	212c      	movs	r1, #44	; 0x2c
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3355      	adds	r3, #85	; 0x55
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f083 0301 	eor.w	r3, r3, #1
 8001d06:	b2d8      	uxtb	r0, r3
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3355      	adds	r3, #85	; 0x55
 8001d16:	4602      	mov	r2, r0
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	e09f      	b.n	8001e5c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3361      	adds	r3, #97	; 0x61
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d109      	bne.n	8001d44 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3360      	adds	r3, #96	; 0x60
 8001d3e:	2202      	movs	r2, #2
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e08b      	b.n	8001e5c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	3361      	adds	r3, #97	; 0x61
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d109      	bne.n	8001d6c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	212c      	movs	r1, #44	; 0x2c
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	3360      	adds	r3, #96	; 0x60
 8001d66:	2202      	movs	r2, #2
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	e077      	b.n	8001e5c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	3361      	adds	r3, #97	; 0x61
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d109      	bne.n	8001d94 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	212c      	movs	r1, #44	; 0x2c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3360      	adds	r3, #96	; 0x60
 8001d8e:	2205      	movs	r2, #5
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	e063      	b.n	8001e5c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	212c      	movs	r1, #44	; 0x2c
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3361      	adds	r3, #97	; 0x61
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	d009      	beq.n	8001dbc <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	212c      	movs	r1, #44	; 0x2c
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	3361      	adds	r3, #97	; 0x61
 8001db6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d14f      	bne.n	8001e5c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	212c      	movs	r1, #44	; 0x2c
 8001dc2:	fb01 f303 	mul.w	r3, r1, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	335c      	adds	r3, #92	; 0x5c
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	202c      	movs	r0, #44	; 0x2c
 8001dd4:	fb00 f303 	mul.w	r3, r0, r3
 8001dd8:	440b      	add	r3, r1
 8001dda:	335c      	adds	r3, #92	; 0x5c
 8001ddc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	335c      	adds	r3, #92	; 0x5c
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d912      	bls.n	8001e18 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	335c      	adds	r3, #92	; 0x5c
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3360      	adds	r3, #96	; 0x60
 8001e12:	2204      	movs	r2, #4
 8001e14:	701a      	strb	r2, [r3, #0]
 8001e16:	e021      	b.n	8001e5c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3360      	adds	r3, #96	; 0x60
 8001e26:	2202      	movs	r2, #2
 8001e28:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e40:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e48:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	461a      	mov	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	b2d9      	uxtb	r1, r3
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	202c      	movs	r0, #44	; 0x2c
 8001e78:	fb00 f303 	mul.w	r3, r0, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3360      	adds	r3, #96	; 0x60
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f001 f8f3 	bl	8003070 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001e8a:	bf00      	nop
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b08a      	sub	sp, #40	; 0x28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	0c5b      	lsrs	r3, r3, #17
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ec6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d004      	beq.n	8001ed8 <HCD_RXQLVL_IRQHandler+0x46>
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	f000 80a9 	beq.w	8002028 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001ed6:	e0aa      	b.n	800202e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80a6 	beq.w	800202c <HCD_RXQLVL_IRQHandler+0x19a>
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	212c      	movs	r1, #44	; 0x2c
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	3344      	adds	r3, #68	; 0x44
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 809b 	beq.w	800202c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3350      	adds	r3, #80	; 0x50
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	441a      	add	r2, r3
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	202c      	movs	r0, #44	; 0x2c
 8001f10:	fb00 f303 	mul.w	r3, r0, r3
 8001f14:	440b      	add	r3, r1
 8001f16:	334c      	adds	r3, #76	; 0x4c
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d87a      	bhi.n	8002014 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3344      	adds	r3, #68	; 0x44
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	b292      	uxth	r2, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f000 fd9a 	bl	8002a70 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	3344      	adds	r3, #68	; 0x44
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	441a      	add	r2, r3
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	202c      	movs	r0, #44	; 0x2c
 8001f56:	fb00 f303 	mul.w	r3, r0, r3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3344      	adds	r3, #68	; 0x44
 8001f5e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	212c      	movs	r1, #44	; 0x2c
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3350      	adds	r3, #80	; 0x50
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	441a      	add	r2, r3
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	202c      	movs	r0, #44	; 0x2c
 8001f7a:	fb00 f303 	mul.w	r3, r0, r3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3350      	adds	r3, #80	; 0x50
 8001f82:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	0cdb      	lsrs	r3, r3, #19
 8001f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f98:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3340      	adds	r3, #64	; 0x40
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d13c      	bne.n	800202c <HCD_RXQLVL_IRQHandler+0x19a>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d039      	beq.n	800202c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fd6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3354      	adds	r3, #84	; 0x54
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	f083 0301 	eor.w	r3, r3, #1
 8001ffe:	b2d8      	uxtb	r0, r3
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	3354      	adds	r3, #84	; 0x54
 800200e:	4602      	mov	r2, r0
 8002010:	701a      	strb	r2, [r3, #0]
      break;
 8002012:	e00b      	b.n	800202c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3360      	adds	r3, #96	; 0x60
 8002022:	2204      	movs	r2, #4
 8002024:	701a      	strb	r2, [r3, #0]
      break;
 8002026:	e001      	b.n	800202c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002028:	bf00      	nop
 800202a:	e000      	b.n	800202e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800202c:	bf00      	nop
  }
}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002062:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b02      	cmp	r3, #2
 800206c:	d10b      	bne.n	8002086 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d102      	bne.n	800207e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 ffdd 	bl	8003038 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b08      	cmp	r3, #8
 800208e:	d132      	bne.n	80020f6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d126      	bne.n	80020f0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d113      	bne.n	80020d2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80020b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020b4:	d106      	bne.n	80020c4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2102      	movs	r1, #2
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fd21 	bl	8002b04 <USB_InitFSLSPClkSel>
 80020c2:	e011      	b.n	80020e8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fd1a 	bl	8002b04 <USB_InitFSLSPClkSel>
 80020d0:	e00a      	b.n	80020e8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d106      	bne.n	80020e8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e0:	461a      	mov	r2, r3
 80020e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80020e6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 ffcf 	bl	800308c <HAL_HCD_PortEnabled_Callback>
 80020ee:	e002      	b.n	80020f6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 ffd9 	bl	80030a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d103      	bne.n	8002108 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f043 0320 	orr.w	r3, r3, #32
 8002106:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e264      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d075      	beq.n	8002226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213a:	4ba3      	ldr	r3, [pc, #652]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b04      	cmp	r3, #4
 8002144:	d00c      	beq.n	8002160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002146:	4ba0      	ldr	r3, [pc, #640]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214e:	2b08      	cmp	r3, #8
 8002150:	d112      	bne.n	8002178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002152:	4b9d      	ldr	r3, [pc, #628]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215e:	d10b      	bne.n	8002178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002160:	4b99      	ldr	r3, [pc, #612]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d05b      	beq.n	8002224 <HAL_RCC_OscConfig+0x108>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d157      	bne.n	8002224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e23f      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002180:	d106      	bne.n	8002190 <HAL_RCC_OscConfig+0x74>
 8002182:	4b91      	ldr	r3, [pc, #580]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a90      	ldr	r2, [pc, #576]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0xb0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x98>
 800219a:	4b8b      	ldr	r3, [pc, #556]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a8a      	ldr	r2, [pc, #552]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b88      	ldr	r3, [pc, #544]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a87      	ldr	r2, [pc, #540]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0xb0>
 80021b4:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a83      	ldr	r2, [pc, #524]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a80      	ldr	r2, [pc, #512]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe fc2c 	bl	8000a30 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fc28 	bl	8000a30 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e204      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0xc0>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7fe fc18 	bl	8000a30 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe fc14 	bl	8000a30 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1f0      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	4b6c      	ldr	r3, [pc, #432]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0xe8>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d063      	beq.n	80022fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002232:	4b65      	ldr	r3, [pc, #404]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223e:	4b62      	ldr	r3, [pc, #392]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002246:	2b08      	cmp	r3, #8
 8002248:	d11c      	bne.n	8002284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224a:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	4b5c      	ldr	r3, [pc, #368]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x152>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e1c4      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4952      	ldr	r1, [pc, #328]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	e03a      	b.n	80022fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228c:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <HAL_RCC_OscConfig+0x2b0>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7fe fbcd 	bl	8000a30 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229a:	f7fe fbc9 	bl	8000a30 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e1a5      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4940      	ldr	r1, [pc, #256]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e015      	b.n	80022fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_OscConfig+0x2b0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fbac 	bl	8000a30 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022dc:	f7fe fba8 	bl	8000a30 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e184      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d030      	beq.n	8002368 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d016      	beq.n	800233c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCC_OscConfig+0x2b4>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe fb8c 	bl	8000a30 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231c:	f7fe fb88 	bl	8000a30 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e164      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x200>
 800233a:	e015      	b.n	8002368 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_OscConfig+0x2b4>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7fe fb75 	bl	8000a30 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234a:	f7fe fb71 	bl	8000a30 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e14d      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a0 	beq.w	80024b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x2b8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d121      	bne.n	80023f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_RCC_OscConfig+0x2b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_RCC_OscConfig+0x2b8>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023be:	f7fe fb37 	bl	8000a30 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	e011      	b.n	80023ea <HAL_RCC_OscConfig+0x2ce>
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	42470000 	.word	0x42470000
 80023d0:	42470e80 	.word	0x42470e80
 80023d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7fe fb2a 	bl	8000a30 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e106      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b85      	ldr	r3, [pc, #532]	; (8002600 <HAL_RCC_OscConfig+0x4e4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d106      	bne.n	800240c <HAL_RCC_OscConfig+0x2f0>
 80023fe:	4b81      	ldr	r3, [pc, #516]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a80      	ldr	r2, [pc, #512]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
 800240a:	e01c      	b.n	8002446 <HAL_RCC_OscConfig+0x32a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b05      	cmp	r3, #5
 8002412:	d10c      	bne.n	800242e <HAL_RCC_OscConfig+0x312>
 8002414:	4b7b      	ldr	r3, [pc, #492]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a7a      	ldr	r2, [pc, #488]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
 8002420:	4b78      	ldr	r3, [pc, #480]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a77      	ldr	r2, [pc, #476]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
 800242c:	e00b      	b.n	8002446 <HAL_RCC_OscConfig+0x32a>
 800242e:	4b75      	ldr	r3, [pc, #468]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	4a74      	ldr	r2, [pc, #464]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6713      	str	r3, [r2, #112]	; 0x70
 800243a:	4b72      	ldr	r3, [pc, #456]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	4a71      	ldr	r2, [pc, #452]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d015      	beq.n	800247a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7fe faef 	bl	8000a30 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe faeb 	bl	8000a30 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0c5      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246c:	4b65      	ldr	r3, [pc, #404]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ee      	beq.n	8002456 <HAL_RCC_OscConfig+0x33a>
 8002478:	e014      	b.n	80024a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe fad9 	bl	8000a30 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe fad5 	bl	8000a30 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0af      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002498:	4b5a      	ldr	r3, [pc, #360]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ee      	bne.n	8002482 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d105      	bne.n	80024b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	4b56      	ldr	r3, [pc, #344]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a55      	ldr	r2, [pc, #340]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 80024b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 809b 	beq.w	80025f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d05c      	beq.n	8002586 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d141      	bne.n	8002558 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_RCC_OscConfig+0x4ec>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe faa9 	bl	8000a30 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e2:	f7fe faa5 	bl	8000a30 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e081      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f4:	4b43      	ldr	r3, [pc, #268]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	019b      	lsls	r3, r3, #6
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	3b01      	subs	r3, #1
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	061b      	lsls	r3, r3, #24
 8002524:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252a:	4b37      	ldr	r3, [pc, #220]	; (8002608 <HAL_RCC_OscConfig+0x4ec>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fa7e 	bl	8000a30 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe fa7a 	bl	8000a30 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e056      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x41c>
 8002556:	e04e      	b.n	80025f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_RCC_OscConfig+0x4ec>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe fa67 	bl	8000a30 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002566:	f7fe fa63 	bl	8000a30 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e03f      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x44a>
 8002584:	e037      	b.n	80025f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e032      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002592:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <HAL_RCC_OscConfig+0x4e8>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d028      	beq.n	80025f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d121      	bne.n	80025f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d11a      	bne.n	80025f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025c2:	4013      	ands	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d111      	bne.n	80025f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	3b01      	subs	r3, #1
 80025dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40007000 	.word	0x40007000
 8002604:	40023800 	.word	0x40023800
 8002608:	42470060 	.word	0x42470060

0800260c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0cc      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b68      	ldr	r3, [pc, #416]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d90c      	bls.n	8002648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b65      	ldr	r3, [pc, #404]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0b8      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002660:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800266a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002678:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a52      	ldr	r2, [pc, #328]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002684:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	494d      	ldr	r1, [pc, #308]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d044      	beq.n	800272c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d119      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07f      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06f      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e067      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f023 0203 	bic.w	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4934      	ldr	r1, [pc, #208]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026fc:	f7fe f998 	bl	8000a30 <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	e00a      	b.n	800271a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002704:	f7fe f994 	bl	8000a30 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e04f      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 020c 	and.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	429a      	cmp	r2, r3
 800272a:	d1eb      	bne.n	8002704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d20c      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e032      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4916      	ldr	r1, [pc, #88]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	490e      	ldr	r1, [pc, #56]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002792:	f000 f821 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002796:	4602      	mov	r2, r0
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	490a      	ldr	r1, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	5ccb      	ldrb	r3, [r1, r3]
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1c8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe f8f8 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00
 80027c8:	40023800 	.word	0x40023800
 80027cc:	080031c4 	.word	0x080031c4
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20000004 	.word	0x20000004

080027d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	2300      	movs	r3, #0
 80027ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027f0:	4b67      	ldr	r3, [pc, #412]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d00d      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x40>
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	f200 80bd 	bhi.w	800297c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x34>
 8002806:	2b04      	cmp	r3, #4
 8002808:	d003      	beq.n	8002812 <HAL_RCC_GetSysClockFreq+0x3a>
 800280a:	e0b7      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4b61      	ldr	r3, [pc, #388]	; (8002994 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800280e:	60bb      	str	r3, [r7, #8]
       break;
 8002810:	e0b7      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002812:	4b61      	ldr	r3, [pc, #388]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002814:	60bb      	str	r3, [r7, #8]
      break;
 8002816:	e0b4      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002818:	4b5d      	ldr	r3, [pc, #372]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002820:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002822:	4b5b      	ldr	r3, [pc, #364]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d04d      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282e:	4b58      	ldr	r3, [pc, #352]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	099b      	lsrs	r3, r3, #6
 8002834:	461a      	mov	r2, r3
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	ea02 0800 	and.w	r8, r2, r0
 8002846:	ea03 0901 	and.w	r9, r3, r1
 800284a:	4640      	mov	r0, r8
 800284c:	4649      	mov	r1, r9
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	014b      	lsls	r3, r1, #5
 8002858:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800285c:	0142      	lsls	r2, r0, #5
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	ebb0 0008 	subs.w	r0, r0, r8
 8002866:	eb61 0109 	sbc.w	r1, r1, r9
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	018b      	lsls	r3, r1, #6
 8002874:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002878:	0182      	lsls	r2, r0, #6
 800287a:	1a12      	subs	r2, r2, r0
 800287c:	eb63 0301 	sbc.w	r3, r3, r1
 8002880:	f04f 0000 	mov.w	r0, #0
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	00d9      	lsls	r1, r3, #3
 800288a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800288e:	00d0      	lsls	r0, r2, #3
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	eb12 0208 	adds.w	r2, r2, r8
 8002898:	eb43 0309 	adc.w	r3, r3, r9
 800289c:	f04f 0000 	mov.w	r0, #0
 80028a0:	f04f 0100 	mov.w	r1, #0
 80028a4:	0259      	lsls	r1, r3, #9
 80028a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028aa:	0250      	lsls	r0, r2, #9
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	461a      	mov	r2, r3
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	f7fd fc84 	bl	80001c8 <__aeabi_uldivmod>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4613      	mov	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	e04a      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ca:	4b31      	ldr	r3, [pc, #196]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	461a      	mov	r2, r3
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028da:	f04f 0100 	mov.w	r1, #0
 80028de:	ea02 0400 	and.w	r4, r2, r0
 80028e2:	ea03 0501 	and.w	r5, r3, r1
 80028e6:	4620      	mov	r0, r4
 80028e8:	4629      	mov	r1, r5
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	014b      	lsls	r3, r1, #5
 80028f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028f8:	0142      	lsls	r2, r0, #5
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	1b00      	subs	r0, r0, r4
 8002900:	eb61 0105 	sbc.w	r1, r1, r5
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	018b      	lsls	r3, r1, #6
 800290e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002912:	0182      	lsls	r2, r0, #6
 8002914:	1a12      	subs	r2, r2, r0
 8002916:	eb63 0301 	sbc.w	r3, r3, r1
 800291a:	f04f 0000 	mov.w	r0, #0
 800291e:	f04f 0100 	mov.w	r1, #0
 8002922:	00d9      	lsls	r1, r3, #3
 8002924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002928:	00d0      	lsls	r0, r2, #3
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	1912      	adds	r2, r2, r4
 8002930:	eb45 0303 	adc.w	r3, r5, r3
 8002934:	f04f 0000 	mov.w	r0, #0
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	0299      	lsls	r1, r3, #10
 800293e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002942:	0290      	lsls	r0, r2, #10
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	f7fd fc38 	bl	80001c8 <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4613      	mov	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	3301      	adds	r3, #1
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	60bb      	str	r3, [r7, #8]
      break;
 800297a:	e002      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800297e:	60bb      	str	r3, [r7, #8]
      break;
 8002980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002982:	68bb      	ldr	r3, [r7, #8]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	00f42400 	.word	0x00f42400
 8002998:	007a1200 	.word	0x007a1200

0800299c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 0201 	bic.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	019b      	lsls	r3, r3, #6
 80029f2:	f043 0220 	orr.w	r2, r3, #32
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <USB_FlushTxFifo+0x48>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e006      	b.n	8002a1a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d0f0      	beq.n	80029fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	00030d40 	.word	0x00030d40

08002a2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3301      	adds	r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <USB_FlushRxFifo+0x40>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d901      	bls.n	8002a50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e006      	b.n	8002a5e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d0f0      	beq.n	8002a3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	00030d40 	.word	0x00030d40

08002a70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	3303      	adds	r3, #3
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e00b      	b.n	8002aac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d3ef      	bcc.n	8002a94 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f003 0301 	and.w	r3, r3, #1
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002b52:	6053      	str	r3, [r2, #4]
 8002b54:	e009      	b.n	8002b6a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d106      	bne.n	8002b6a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b62:	461a      	mov	r2, r3
 8002b64:	f241 7370 	movw	r3, #6000	; 0x1770
 8002b68:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	b29b      	uxth	r3, r3
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b089      	sub	sp, #36	; 0x24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0c9b      	lsrs	r3, r3, #18
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0fdb      	lsrs	r3, r3, #31
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d104      	bne.n	8002bf4 <USB_HC_Halt+0x5a>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e0e8      	b.n	8002dc6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <USB_HC_Halt+0x66>
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d173      	bne.n	8002ce8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	0151      	lsls	r1, r2, #5
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	440a      	add	r2, r1
 8002c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c1e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 80cb 	bne.w	8002dc4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d143      	bne.n	8002cc2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	0151      	lsls	r1, r2, #5
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	440a      	add	r2, r1
 8002c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c58:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c78:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	0151      	lsls	r1, r2, #5
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	440a      	add	r2, r1
 8002c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c98:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca6:	d81d      	bhi.n	8002ce4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cbe:	d0ec      	beq.n	8002c9a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002cc0:	e080      	b.n	8002dc4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	0151      	lsls	r1, r2, #5
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	440a      	add	r2, r1
 8002cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ce0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002ce2:	e06f      	b.n	8002dc4 <USB_HC_Halt+0x22a>
            break;
 8002ce4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002ce6:	e06d      	b.n	8002dc4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	0151      	lsls	r1, r2, #5
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	440a      	add	r2, r1
 8002cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d06:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d143      	bne.n	8002da0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	0151      	lsls	r1, r2, #5
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	0151      	lsls	r1, r2, #5
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	440a      	add	r2, r1
 8002d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d56:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	0151      	lsls	r1, r2, #5
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	440a      	add	r2, r1
 8002d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d76:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d84:	d81d      	bhi.n	8002dc2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d9c:	d0ec      	beq.n	8002d78 <USB_HC_Halt+0x1de>
 8002d9e:	e011      	b.n	8002dc4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	0151      	lsls	r1, r2, #5
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	440a      	add	r2, r1
 8002db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	e000      	b.n	8002dc4 <USB_HC_Halt+0x22a>
          break;
 8002dc2:	bf00      	nop
    }
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	; 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fdeb 	bl	80029be <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002de8:	2110      	movs	r1, #16
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff fdf8 	bl	80029e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff fe1b 	bl	8002a2c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	e01f      	b.n	8002e3c <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e12:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e1a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e22:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b0f      	cmp	r3, #15
 8002e40:	d9dc      	bls.n	8002dfc <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	e034      	b.n	8002eb2 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e5e:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e66:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e6e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e8e:	d80c      	bhi.n	8002eaa <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ea6:	d0ec      	beq.n	8002e82 <USB_StopHost+0xb0>
 8002ea8:	e000      	b.n	8002eac <USB_StopHost+0xda>
        break;
 8002eaa:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b0f      	cmp	r3, #15
 8002eb6:	d9c7      	bls.n	8002e48 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff fd64 	bl	800299c <USB_EnableGlobalInt>

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f804 	bl	8002f02 <USBH_HandleSof>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b0b      	cmp	r3, #11
 8002f12:	d10a      	bne.n	8002f2a <USBH_HandleSof+0x28>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8002f42:	bf00      	nop
}
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002f5e:	bf00      	nop
}
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f883 	bl	80030c4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	791b      	ldrb	r3, [r3, #4]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f80b 	bl	8002fe0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	795b      	ldrb	r3, [r3, #5]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f805 	bl	8002fe0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	2b0a      	cmp	r3, #10
 8002ff0:	d80d      	bhi.n	800300e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	33e0      	adds	r3, #224	; 0xe0
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	33e0      	adds	r3, #224	; 0xe0
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff57 	bl	8002ede <USBH_LL_IncTimer>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff8f 	bl	8002f6a <USBH_LL_Connect>
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ff98 	bl	8002f98 <USBH_LL_Disconnect>
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	70fb      	strb	r3, [r7, #3]
 800307c:	4613      	mov	r3, r2
 800307e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff49 	bl	8002f32 <USBH_LL_PortEnabled>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff49 	bl	8002f4e <USBH_LL_PortDisabled>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fe9d 	bl	8000e1a <HAL_HCD_Stop>
 80030e0:	4603      	mov	r3, r0
 80030e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f808 	bl	80030fc <USBH_Get_USB_Status>
 80030ec:	4603      	mov	r3, r0
 80030ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80030f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d817      	bhi.n	8003140 <USBH_Get_USB_Status+0x44>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <USBH_Get_USB_Status+0x1c>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	08003129 	.word	0x08003129
 800311c:	0800312f 	.word	0x0800312f
 8003120:	08003135 	.word	0x08003135
 8003124:	0800313b 	.word	0x0800313b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
    break;
 800312c:	e00b      	b.n	8003146 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800312e:	2302      	movs	r3, #2
 8003130:	73fb      	strb	r3, [r7, #15]
    break;
 8003132:	e008      	b.n	8003146 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
    break;
 8003138:	e005      	b.n	8003146 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800313a:	2302      	movs	r3, #2
 800313c:	73fb      	strb	r3, [r7, #15]
    break;
 800313e:	e002      	b.n	8003146 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8003140:	2302      	movs	r3, #2
 8003142:	73fb      	strb	r3, [r7, #15]
    break;
 8003144:	bf00      	nop
  }
  return usb_status;
 8003146:	7bfb      	ldrb	r3, [r7, #15]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <__libc_init_array>:
 8003154:	b570      	push	{r4, r5, r6, lr}
 8003156:	4d0d      	ldr	r5, [pc, #52]	; (800318c <__libc_init_array+0x38>)
 8003158:	4c0d      	ldr	r4, [pc, #52]	; (8003190 <__libc_init_array+0x3c>)
 800315a:	1b64      	subs	r4, r4, r5
 800315c:	10a4      	asrs	r4, r4, #2
 800315e:	2600      	movs	r6, #0
 8003160:	42a6      	cmp	r6, r4
 8003162:	d109      	bne.n	8003178 <__libc_init_array+0x24>
 8003164:	4d0b      	ldr	r5, [pc, #44]	; (8003194 <__libc_init_array+0x40>)
 8003166:	4c0c      	ldr	r4, [pc, #48]	; (8003198 <__libc_init_array+0x44>)
 8003168:	f000 f820 	bl	80031ac <_init>
 800316c:	1b64      	subs	r4, r4, r5
 800316e:	10a4      	asrs	r4, r4, #2
 8003170:	2600      	movs	r6, #0
 8003172:	42a6      	cmp	r6, r4
 8003174:	d105      	bne.n	8003182 <__libc_init_array+0x2e>
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	f855 3b04 	ldr.w	r3, [r5], #4
 800317c:	4798      	blx	r3
 800317e:	3601      	adds	r6, #1
 8003180:	e7ee      	b.n	8003160 <__libc_init_array+0xc>
 8003182:	f855 3b04 	ldr.w	r3, [r5], #4
 8003186:	4798      	blx	r3
 8003188:	3601      	adds	r6, #1
 800318a:	e7f2      	b.n	8003172 <__libc_init_array+0x1e>
 800318c:	080031dc 	.word	0x080031dc
 8003190:	080031dc 	.word	0x080031dc
 8003194:	080031dc 	.word	0x080031dc
 8003198:	080031e0 	.word	0x080031e0

0800319c <memset>:
 800319c:	4402      	add	r2, r0
 800319e:	4603      	mov	r3, r0
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d100      	bne.n	80031a6 <memset+0xa>
 80031a4:	4770      	bx	lr
 80031a6:	f803 1b01 	strb.w	r1, [r3], #1
 80031aa:	e7f9      	b.n	80031a0 <memset+0x4>

080031ac <_init>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	bf00      	nop
 80031b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b2:	bc08      	pop	{r3}
 80031b4:	469e      	mov	lr, r3
 80031b6:	4770      	bx	lr

080031b8 <_fini>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr
